apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'


android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    buildToolsVersion = '29.0.2'

    sourceSets {
        getByName("main") {
            manifest.srcFile("src/androidMain/AndroidManifest.xml")
            java.srcDirs("src/androidMain/kotlin")
            res.srcDirs("src/androidMain/res")
        }
    }
}

kotlin {
    final def buildForDevice = project.findProperty("device")?.toBoolean() ?: false

    targets {
        final def iOSTarget = buildForDevice ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('httpmock') {
                    if (!buildForDevice) {
                        embedBitcode("disable")
                    }
                }
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
        }

        androidMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
            implementation 'org.junit.jupiter:junit-jupiter-params:5.3.2'

            implementation 'androidx.test.espresso:espresso-core:3.2.0'
            implementation 'androidx.test.espresso:espresso-contrib:3.2.0'

            implementation('com.squareup.okhttp3:mockwebserver:4.4.0') {
                exclude module: 'okhttp'
            }
        }

        iOSMain.dependencies {
        }
    }

    cocoapods {
        pod("Embassy", "~> 4.1")
    }
}