apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion = '29.0.2'

    sourceSets {
        getByName("main") {
            manifest.srcFile("src/androidMain/AndroidManifest.xml")
            java.srcDirs("src/androidMain/kotlin")
            res.srcDirs("src/androidMain/res")
        }
    }
}

kotlin {
    targets {
        fromPreset(presets.iosArm64, 'iOS') {
            binaries {
                framework {
                    baseName = "sharedTests"
                }
            }
        }

        fromPreset(presets.iosX64, 'iOSSimulator') {
            binaries {
                framework {
                    baseName = "sharedTests"
                    transitiveExport = true
                    export project(':kuiks-core')

//                    linkerOpts += ['-framework', 'UIKit', '-framework', 'XCTest']
                }
            }
        }


        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            api project(':kuiks-core')
            implementation project(":httpmock")
        }

        commonTest {
            kotlin.srcDir("src/commonMain/kotlin")
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            }
        }

        androidMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkDebugTestIOSSimulator'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.iOSSimulator.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn',  '--standalone', device, binary.absolutePath
        }
    }
}